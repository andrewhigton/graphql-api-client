"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PeopleTC = void 0;
const node_fetch_1 = __importDefault(require("node-fetch"));
const index_1 = require("../index");
const Film_1 = require("./Film");
const restApiResponse = {
    name: 'Luke Skywalker',
    height: '172',
    mass: '77',
    hair_color: 'blond',
    skin_color: 'fair',
    eye_color: 'blue',
    birth_year: '19BBY',
    gender: 'male',
    films: [
        'https://swapi.co/api/films/2/',
        'https://swapi.co/api/films/6/',
        'https://swapi.co/api/films/3/',
    ],
};
exports.PeopleTC = index_1.composeWithJson('People', restApiResponse);
exports.PeopleTC.addResolver({
    name: 'findById',
    type: exports.PeopleTC,
    args: {
        id: 'Int!',
    },
    resolve: (rp) => {
        return node_fetch_1.default(`https://swapi.co/api/people/${rp.args.id}/`).then((r) => r.json());
    },
});
exports.PeopleTC.addResolver({
    name: 'findByUrl',
    type: exports.PeopleTC,
    args: {
        url: 'String!',
    },
    resolve: (rp) => node_fetch_1.default(rp.args.url).then((r) => r.json()),
});
exports.PeopleTC.addResolver({
    name: 'findByUrlList',
    type: [exports.PeopleTC],
    args: {
        urls: '[String]!',
    },
    resolve: (rp) => {
        return Promise.all(rp.args.urls.map((url) => node_fetch_1.default(url).then((r) => r.json())));
    },
});
exports.PeopleTC.addRelation('filmObjs', {
    resolver: () => Film_1.FilmTC.getResolver('findByUrlList'),
    prepareArgs: {
        urls: (source) => source.films,
    },
});
//# sourceMappingURL=People.js.map