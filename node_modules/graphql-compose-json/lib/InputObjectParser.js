"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const graphql_compose_1 = require("graphql-compose");
class InputObjectParser {
    static createITC(name, json, opts) {
        if (!json || typeof json !== 'object') {
            throw new Error('You provide empty object in second arg for `createITC` method.');
        }
        const sc = (opts === null || opts === void 0 ? void 0 : opts.schemaComposer) || graphql_compose_1.schemaComposer;
        const tc = sc.createInputTC(name);
        Object.keys(json).forEach((fieldName) => {
            const fieldConfig = this.getFieldConfig(json[fieldName], { typeName: name, fieldName });
            tc.setField(fieldName, fieldConfig);
        });
        return tc;
    }
    static getFieldConfig(value, opts) {
        const typeOf = typeof value;
        if (typeOf === 'number')
            return 'Float';
        if (typeOf === 'string')
            return 'String';
        if (typeOf === 'boolean')
            return 'Boolean';
        if (value instanceof Date)
            return 'Date';
        if (graphql_compose_1.isComposeInputType(value)) {
            return value;
        }
        if (typeOf === 'object') {
            if (value === null)
                return 'JSON';
            if (Array.isArray(value)) {
                if (Array.isArray(value[0]))
                    return ['JSON'];
                const val = typeof value[0] === 'object' && value[0] !== null
                    ? Object.assign({}, ...value)
                    : value[0];
                const args = opts && opts.typeName && opts.fieldName
                    ? {
                        typeName: opts.typeName,
                        fieldName: opts.fieldName,
                    }
                    : {};
                return [this.getFieldConfig(val, args)];
            }
            if (opts && opts.typeName && opts.fieldName) {
                return this.createITC(`${opts.typeName}_${graphql_compose_1.upperFirst(opts.fieldName)}`, value);
            }
        }
        if (typeOf === 'function') {
            return value();
        }
        return 'JSON';
    }
}
exports.default = InputObjectParser;
//# sourceMappingURL=InputObjectParser.js.map